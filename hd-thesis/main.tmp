
\begin {figure}[tp] \begin {minipage}[t]{0.49\textwidth } \begin {algorithm}{$\KEActivate (\id , \sk , \peerid ,\peerpk ,\role )$} \item $\st '.\role \gets \role $ \item $\st '.\status \gets \running $ \item if $\role = \initiator $ then \item \hindent $(\st ',m') \gets \RunInitI (\id ,\sk ,\st ')$ \item else $m' \gets \bot $ \item return $(\st ',m')$ \end {algorithm} \par \ExptSepSpace \par \begin {algorithm}{$\KERun (\id ,\sk ,\st ,\peerpk ,m)$} \item if $\st .\status \neq \running $ then \item return $\bot $ \item if $\st .\role = \initiator $ then \item \hindent $(\st ',m') \gets \RunInit (\id ,\sk ,\st ,\peerpk ,m)$ \item else if $\st .\sid = \bot $ \item \hindent $(\st ',m') \gets \RunRespI (\id ,\sk ,\st ,\peerpk ,m)$ \item else \item \hindent $(\st ',m') \gets \RunRespII (\id ,\sk ,\st ,\peerpk ,m)$ \item return $(\st ',m')$ \end {algorithm} \par \ExptSepSpace \par \begin {algorithm}{$\RunInitI (\id ,\sk ,\st )$} \item $\nonce _I \sample \bits ^{\nl }$ \item $\x \sample \ZZ _p$ \item $\X \gets g^{\x }$ \item $\st '.\state \gets (\nonce _I, \X , \x )$ \item $m' \gets (\nonce _I, \X )$ \item return $(\st ',m')$ \end {algorithm} \par \ExptSepSpace \par \begin {algorithm}{$\RunRespI (\id ,\sk ,\st ,\peerpk ,m)$} \item $(\nonce _I,\X ) \gets m$ \item $\nonce _R \sample \bits ^{\nl }$ \item $\y \sample \ZZ _p$ \item $\Y \gets g^{\y }$ \item $\st '.\sid \gets (\nonce _I, \nonce _R,\X ,\Y )$ \item $\sigma \gets \SIGScheme .\SIGSign (\sk ,\labelrs \|\nonce _I\|\nonce _R\|\X \|\Y )$ \item $\mk \gets \RO (\nonce _I\|\nonce _R\|\X \|\Y \|\X ^{\y })$ \item $\ks \gets \PRF (\mk ,0)$ \item $\kt \gets \PRF (\mk ,1)$ \item \frame {$\ke \gets \PRF (\mk ,2)$} \item $\tau \gets \MACScheme .\MACTag (\kt , \labelrm \|\nonce _I\|\nonce _R\|\id )$ \item $\st '.\state \gets (\nonce _I,\nonce _R,\X ,\Y ,\ks ,\kt )$ \newline \frame {$\st '.\state \gets (\nonce _I, \nonce _R,\X ,\Y ,\ks ,\kt ,\ke )$} \item $m' \gets (\nonce _R, \Y , \id , \sigma , \tau )$ \newline \frame {$m' \gets (\nonce _R, \Y , \ENCEnc (\ke ,(\id ,\sigma ,\tau )))$} \item return $(\st ', m')$ \end {algorithm} \end {minipage} \begin {minipage}[t]{0.49\textwidth } \begin {algorithm}{$\RunInit (\id ,\sk ,\st ,\peerpk ,m)$} \item $(\nonce _R,\Y ,\peerid ,\sigma , \tau ) \gets m$ \newline \frame {$(\nonce _R,\Y ,\ciph ) \gets m$} \item $(\nonce _I,\X ,\x ) \gets \st .\state $ \item $\st '.\sid \gets (\nonce _I,\nonce _R,\X ,\Y )$ \par \item $\mk \gets \RO (\nonce _I\|\nonce _R\|\X \|\Y \|\Y ^{\x })$ \item $\ks \gets \PRF (\mk ,0)$ \item $\kt \gets \PRF (\mk ,1)$ \item \frame {$\ke \gets \PRF (\mk ,2)$} \par \item \frame {$(\peerid ,\sigma ,\tau ) \gets \ENCDec (\ke ,\ciph )$} \item $\st '.\peerid \gets \peerid $ \par \item if $\SIGScheme .\SIGVerify (\peerpk [\peerid ], \labelrs \|\nonce _I\|\nonce _R\|\X \|\Y , \sigma )$\\ and $\MACScheme .\MACVerify (\kt , \labelrm \|\nonce _I\|\nonce _R\|\peerid , \tau )$ then \item \hindent $\st '.\status \gets \accepted $ \item \hindent $\st '.\skey \gets \ks $ \item \hindent $\sigma ' \gets \SIGScheme .\SIGSign (\sk , \labelis \|\nonce _I\|\nonce _R\|\X \|\Y )$ \item \hindent $\tau ' \gets \MACScheme .\MACTag (\kt , \labelim \|\nonce _I\|\nonce _R\|\id )$ \item \hindent $m' \gets (\id , \sigma ', \tau ')$ \newline \null \hindent \frame {$m' \gets \ENCEnc (\ke ,(\id ,\sigma ',\tau '))$} \item else \item \hindent $m' \gets \bot $ \item \hindent $\st '.\status \gets \rejected $ \item return $(\st ', m')$ \end {algorithm} \par \ExptSepSpace \par \begin {algorithm}{$\RunRespII (\id ,\sk ,\st ,\peerpk ,m)$} \item $(\nonce _I,\nonce _R,\X ,\Y ,\ks ,\kt ) \gets \st .\state $ \newline \frame {$(\nonce _I,\nonce _R,\X ,\Y ,\ks ,\kt ,\ke ) \gets st.\state $} \item $(\peerid ,\sigma ',\tau ')\gets m$ \newline \frame {$(\peerid ,\sigma ',\tau ')\gets \ENCDec (\ke ,m)$} \item $\st '.\peerid \gets \peerid $ \item if $\SIGScheme .\SIGVerify (\peerpk [\peerid ], \labelis \|\nonce _I\|\nonce _R\|\X \|\Y , \sigma ')$\\ and $\MACScheme .\MACVerify (\kt , \labelim \|\nonce _I\|\nonce _R\|\peerid , \tau ')$ then \item \hindent $\st '.\status \gets \accepted $ \item \hindent $\st '.\skey \gets \ks $ \item else $\st '.\status \gets \rejected $ \item $m' \gets \emptystring $ \item return $(\st ', m')$ \end {algorithm} \end {minipage} \caption {The formalized \SIGMA /\SIGMAI key exchange protocols (cf.\ Section~\ref {sec:ake-syntax}). \fbox {Boxed} code is only performed in the \SIGMAI variant. } \label {fig:sigma-formal} \end {figure}

